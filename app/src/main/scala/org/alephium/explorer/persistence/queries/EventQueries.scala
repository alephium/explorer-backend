// Copyright (c) Alephium
// SPDX-License-Identifier: LGPL-3.0-only

package org.alephium.explorer.persistence.queries

import scala.concurrent.ExecutionContext

import slick.jdbc.{PositionedParameters, SetParameter, SQLActionBuilder}
import slick.jdbc.PostgresProfile.api._

import org.alephium.explorer.api.model._
import org.alephium.explorer.persistence._
import org.alephium.explorer.persistence.model.EventEntity
import org.alephium.explorer.persistence.schema.CustomGetResult._
import org.alephium.explorer.persistence.schema.CustomSetParameter._
import org.alephium.explorer.util.SlickUtil._
import org.alephium.protocol.model.{Address, TransactionId}

object EventQueries {

  private val eventFields: String =
    """
      block_hash,
      tx_hash,
      contract_address,
      input_address,
      block_timestamp,
      event_index,
      fields,
      event_order_in_block
    """

  def insertEventsQuery(events: Iterable[EventEntity]): DBActionW[Int] = {
    QuerySplitter.splitUpdates(rows = events, columnsPerRow = 8) { (events, placeholder) =>
      val query =
        s"""
           INSERT INTO events ($eventFields)
           VALUES $placeholder
           ON CONFLICT
            ON CONSTRAINT events_pk
            DO NOTHING
           """

      val parameters: SetParameter[Unit] =
        (_: Unit, params: PositionedParameters) =>
          events foreach { event =>
            params >> event.blockHash
            params >> event.txHash
            params >> event.contractAddress
            params >> event.inputAddress
            params >> event.timestamp
            params >> event.eventIndex
            params >> event.fields
            params >> event.eventOrder
          }

      // Return builder generated by Slick's string interpolation
      SQLActionBuilder(
        sql = query,
        setParameter = parameters
      ).asUpdate
    }
  }

  def getEventsByTxIdQuery(txId: TransactionId): DBActionSR[EventEntity] =
    sql"""
      SELECT #$eventFields
      FROM events
      WHERE tx_hash = $txId
      ORDER BY event_order_in_block
      """.asASE[EventEntity](eventGetResult)

  def getEventsByContractAddressQuery(
      address: Address,
      eventIndex: Option[Int],
      pagination: Pagination
  ): DBActionSR[EventEntity] = {
    // We map to add or not the event index, we duplicate the rest of the
    // query to have proper prepared statements
    eventIndex
      .map { i =>
        sql"""
          SELECT #$eventFields
          FROM events
          WHERE contract_address = $address
          AND event_index = $i
          ORDER BY block_timestamp DESC, event_order_in_block
        """
      }
      .getOrElse {
        sql"""
          SELECT #$eventFields
          FROM events
          WHERE contract_address = $address
          ORDER BY block_timestamp DESC, event_order_in_block
        """
      }
      .paginate(pagination)
      .asASE[EventEntity](eventGetResult)
  }

  def getEventsByContractAndInputAddressQuery(
      contract: Address,
      input: Address,
      eventIndex: Option[Int],
      pagination: Pagination
  ): DBActionSR[EventEntity] = {
    eventIndex
      .map { i =>
        sql"""
          SELECT #$eventFields
          FROM events
          WHERE contract_address = $contract
          AND input_address = $input
          AND event_index = $i
          ORDER BY block_timestamp DESC
        """
      }
      .getOrElse {
        sql"""
          SELECT #$eventFields
          FROM events
          WHERE contract_address = $contract
          AND input_address = $input
          ORDER BY block_timestamp DESC
        """
      }
      .paginate(pagination)
      .asASE[EventEntity](eventGetResult)
  }

  def countEvents()(implicit
      ec: ExecutionContext
  ): DBActionR[Int] = {
    sql"""
      SELECT count(*)
      FROM events
    """.asAS[Int].exactlyOne
  }
}
